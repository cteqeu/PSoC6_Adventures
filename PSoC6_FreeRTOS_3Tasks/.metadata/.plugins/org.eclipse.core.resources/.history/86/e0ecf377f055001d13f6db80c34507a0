/******************************************************************************
* File Name:   main.c
*
* Description: This is the source code for Hello World Example using HAL APIs.
*
* Related Document: See README.md
*
*
*******************************************************************************
* Copyright 2022, Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
*
* This software, including source code, documentation and related
* materials ("Software") is owned by Cypress Semiconductor Corporation
* or one of its affiliates ("Cypress") and is protected by and subject to
* worldwide patent protection (United States and foreign),
* United States copyright laws and international treaty provisions.
* Therefore, you may use this Software only as provided in the license
* agreement accompanying the software package from which you
* obtained this Software ("EULA").
* If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
* non-transferable license to copy, modify, and compile the Software
* source code solely for use in connection with Cypress's
* integrated circuit products.  Any reproduction, modification, translation,
* compilation, or representation of this Software except as specified
* above is prohibited without the express written permission of Cypress.
*
* Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
* reserves the right to make changes to the Software without notice. Cypress
* does not assume any liability arising out of the application or use of the
* Software or any product or circuit described in the Software. Cypress does
* not authorize its products for use in any products where a malfunction or
* failure of the Cypress product may reasonably be expected to result in
* significant property damage, injury or death ("High Risk Product"). By
* including Cypress's product in a High Risk Product, the manufacturer
* of such system or application assumes all risk of such use and in doing
* so agrees to indemnify Cypress against all liability.
*******************************************************************************/

#include "cyhal.h"
#include "cybsp.h"
#include "cy_retarget_io.h"

#include <FreeRTOS.h>
#include <task.h>

#include "task1.h"
#include "task2.h"
#include "task3.h"


/*******************************************************************************
* Macros
*******************************************************************************/
/* LED blink timer clock value in Hz  */
#define LED_BLINK_TIMER_CLOCK_HZ          (10000)

/* LED blink timer period value */
#define LED_BLINK_TIMER_PERIOD            (9999)

TaskHandle_t task1_handle;
TaskHandle_t task2_handle;
TaskHandle_t task3_handle;

/*******************************************************************************
* Global Variables
*******************************************************************************/
bool timer_interrupt_flag = false;
bool led_blink_active_flag = true;

/* Variable for storing character read from terminal */
uint8_t uart_read_value;

int main(void)
{
    cy_rslt_t result;

    /* Initialize the device and board peripherals */
    result = cybsp_init();
    
    /* Board init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Enable global interrupts */
    __enable_irq();

    /* Initialize retarget-io to use the debug UART port */
    result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX, CY_RETARGET_IO_BAUDRATE);

    /* retarget-io init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Initialize the User LED */
    result = cyhal_gpio_init(CYBSP_USER_LED, CYHAL_GPIO_DIR_OUTPUT, CYHAL_GPIO_DRIVE_STRONG, CYBSP_LED_STATE_OFF);

    /* GPIO init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* \x1b[2J\x1b[;H - ANSI ESC sequence for clear screen */
    printf("\x1b[2J\x1b[;H");

    printf("************************"
           "FreeRTOS 3 Tasks Example "
           "************************ \r\n\n");
    xTaskCreate(task1, "Task 1", TASK1_STACK_SIZE, NULL, TASK1_PRIORITY, &task1_handle);
    xTaskCreate(task2, "Task 2", TASK2_STACK_SIZE, NULL, TASK2_PRIORITY, &task2_handle);
    xTaskCreate(task3, "Task 3", TASK3_STACK_SIZE, NULL, TASK3_PRIORITY, &task3_handle);

    vTaskStartScheduler();

//    for (;;)
//    {
//        /* Check if 'Enter' key was pressed */
//        if (cyhal_uart_getc(&cy_retarget_io_uart_obj, &uart_read_value, 1)
//             == CY_RSLT_SUCCESS)
//        {
//            if (uart_read_value == '\r')
//            {
//                /* Pause LED blinking by stopping the timer */
//                if (led_blink_active_flag)
//                {
//                    cyhal_timer_stop(&led_blink_timer);
//
//                    printf("LED blinking paused \r\n");
//                }
//                else /* Resume LED blinking by starting the timer */
//                {
//                    cyhal_timer_start(&led_blink_timer);
//
//                    printf("LED blinking resumed\r\n");
//                }
//
//                /* Move cursor to previous line */
//                printf("\x1b[1F");
//
//                led_blink_active_flag ^= 1;
//            }
//        }
//
//        /* Check if timer elapsed (interrupt fired) and toggle the LED */
//        if (timer_interrupt_flag)
//        {
//            /* Clear the flag */
//            timer_interrupt_flag = false;
//
//            /* Invert the USER LED state */
//            cyhal_gpio_toggle(CYBSP_USER_LED);
//        }
//    }
    /* Should never get here. */
    CY_ASSERT(0);
}
