#include "cy_pdl.h"
#include "cyhal.h"
#include "cybsp.h"
#include "cy_retarget_io.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timer.h"


static void TxTask(void *pvParameters);
static void RxTask(void *pvParameters);

static TaskHandle_t xTxTask;
static TaskHandle_t xRxTask;

static QueueHandle_t xQueue = NULL;

int ButtonValue=0;

int main(void)
{
    cy_rslt_t result;

    /* Initialize the device and board peripherals */
    result = cybsp_init();
    
    /* Board init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Enable global interrupts */
    __enable_irq();

    /* Initialize retarget-io to use the debug UART port */
    result = cy_retarget_io_init(CYBSP_DEBUG_UART_TX, CYBSP_DEBUG_UART_RX, CY_RETARGET_IO_BAUDRATE);

    /* retarget-io init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }

    /* Initialize the User LED */
    result = cyhal_gpio_init(CYBSP_USER_LED, CYHAL_GPIO_DIR_OUTPUT, 
                             CYHAL_GPIO_DRIVE_STRONG, CYBSP_LED_STATE_OFF);

    /* GPIO init failed. Stop program execution */
    if (result != CY_RSLT_SUCCESS)
    {
        CY_ASSERT(0);
    }
    
    printf("Before FreeRTOS Scheduler\n");

    xTaskCreate(TxTask, ( const char * ) "Tx", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, &xTxTask);
    xTaskCreate(RxTask, ( const char * ) "Rx", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, &xRxTask);

    xQueue = xQueueCreate(1,sizeof(int));

    vTaskStartScheduler();
}

static void TxTask( void *pvParameters )
{
	for(;;)
	{

	}
}

static void RxTask( void *pvParameters )
{
	int ValueFromQueue=0;

	for(;;)
	{
		for( ;; )
			{
				xQueueReceive( 	xQueue,ValueFromQueue,portMAX_DELAY );
	}
}

/* [] END OF FILE */
